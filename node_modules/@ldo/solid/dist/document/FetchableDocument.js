"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FetchableDocument = void 0;
const events_1 = __importDefault(require("events"));
class FetchableDocument extends events_1.default {
    constructor(context, documentGetterOptions) {
        super();
        this._isLoading = false;
        this._isWriting = false;
        this._didInitialFetch = false;
        this.context = context;
        if (documentGetterOptions?.autoLoad) {
            this._isLoading = true;
            this.read();
        }
    }
    get isLoading() {
        return this._isLoading;
    }
    get didInitialFetch() {
        return this._didInitialFetch;
    }
    get isLoadingInitial() {
        return this._isLoading && !this._didInitialFetch;
    }
    get isReloading() {
        return this._isLoading && this._didInitialFetch;
    }
    get error() {
        return this._error;
    }
    get isWriting() {
        return this._isWriting;
    }
    async read() {
        this._isLoading = true;
        this.emitStateUpdate();
        const documentError = await this.fetchDocument();
        this._isLoading = false;
        this._didInitialFetch = true;
        if (documentError) {
            this.setError(documentError);
        }
        this.emitStateUpdate();
    }
    async reload() {
        return this.read();
    }
    beginWrite() {
        this._isWriting = true;
        this.emitStateUpdate();
    }
    endWrite(error) {
        if (error) {
            this.setError(error);
        }
        this._isWriting = false;
        this.emitStateUpdate();
    }
    setError(error) {
        this._error = error;
        this.emitStateUpdate();
        this.context.documentEventEmitter.emit("documentError", error);
    }
    emitStateUpdate() {
        this.emit("stateUpdate");
    }
    onStateUpdate(callback) {
        this.on("stateUpdate", callback);
    }
    offStateUpdate(callback) {
        this.off("stateUpdate", callback);
    }
}
exports.FetchableDocument = FetchableDocument;
//# sourceMappingURL=FetchableDocument.js.map