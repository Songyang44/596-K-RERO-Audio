import type { DocumentError } from "./errors/DocumentError";
import type { DocumentGetterOptions } from "./DocumentStore";
import type { SolidLdoDatasetContext } from "../SolidLdoDatasetContext";
import type TypedEventEmitter from "typed-emitter";
export type FetchableDocumentEventEmitter = TypedEventEmitter<{
    stateUpdate: () => void;
}>;
declare const FetchableDocument_base: new () => FetchableDocumentEventEmitter;
export declare abstract class FetchableDocument extends FetchableDocument_base {
    protected _isLoading: boolean;
    protected _isWriting: boolean;
    protected _didInitialFetch: boolean;
    protected _error?: DocumentError;
    protected context: SolidLdoDatasetContext;
    constructor(context: SolidLdoDatasetContext, documentGetterOptions?: DocumentGetterOptions);
    get isLoading(): boolean;
    get didInitialFetch(): boolean;
    get isLoadingInitial(): boolean;
    get isReloading(): boolean;
    get error(): DocumentError | undefined;
    get isWriting(): boolean;
    read(): Promise<void>;
    reload(): Promise<void>;
    protected abstract fetchDocument(): Promise<DocumentError | undefined>;
    protected beginWrite(): void;
    protected endWrite(error?: DocumentError): void;
    setError(error: DocumentError): void;
    protected emitStateUpdate(): void;
    onStateUpdate(callback: () => void): void;
    offStateUpdate(callback: () => void): void;
}
export {};
