export interface WaitingProcess<Args extends any[], Return> {
    name: string;
    args: Args;
    perform: (...args: Args) => Promise<Return>;
    awaitingResolutions: ((returnValue: Return) => void)[];
    awaitingRejections: ((err: any) => void)[];
}
export declare const ANY_KEY = "any";
export interface WaitingProcessOptions<Args extends any[], Return> {
    name: string;
    args: Args;
    perform: (...args: Args) => Promise<Return>;
    modifyQueue: (processQueue: WaitingProcess<any[], any>[], currentlyProcessing: WaitingProcess<any[], any> | undefined, args: Args) => WaitingProcess<any[], any> | undefined;
}
export declare class RequestBatcher {
    private lastRequestTimestampMap;
    private currentlyProcessing;
    private processQueue;
    shouldBatchAllRequests: boolean;
    batchMillis: number;
    constructor(options?: Partial<{
        shouldBatchAllRequests: boolean;
        batchMillis: number;
    }>);
    isLoading(key: string): boolean;
    private triggerOrWaitProcess;
    queueProcess<Args extends any[], ReturnType>(options: WaitingProcessOptions<Args, ReturnType>): Promise<ReturnType>;
}
