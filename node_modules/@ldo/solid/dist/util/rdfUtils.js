"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addRawTurtleToDataset = exports.addResourceRdfToContainer = exports.deleteResourceRdfFromContainer = exports.getSlug = exports.getParentUri = exports.ldpBasicContainer = exports.ldpContainer = exports.ldpResource = exports.rdfType = exports.ldpContains = void 0;
const ldo_1 = require("@ldo/ldo");
const data_model_1 = require("@rdfjs/data-model");
const uriTypes_1 = require("./uriTypes");
const NoncompliantPodError_1 = require("../requester/results/error/NoncompliantPodError");
const ErrorResult_1 = require("../requester/results/error/ErrorResult");
exports.ldpContains = (0, data_model_1.namedNode)("http://www.w3.org/ns/ldp#contains");
exports.rdfType = (0, data_model_1.namedNode)("http://www.w3.org/1999/02/22-rdf-syntax-ns#type");
exports.ldpResource = (0, data_model_1.namedNode)("http://www.w3.org/ns/ldp#Resource");
exports.ldpContainer = (0, data_model_1.namedNode)("http://www.w3.org/ns/ldp#Container");
exports.ldpBasicContainer = (0, data_model_1.namedNode)("http://www.w3.org/ns/ldp#BasicContainer");
function getParentUri(uri) {
    const urlObject = new URL(uri);
    const pathItems = urlObject.pathname.split("/");
    if (pathItems.length < 2 ||
        (pathItems.length === 2 && pathItems[1].length === 0)) {
        return undefined;
    }
    if (pathItems[pathItems.length - 1] === "") {
        pathItems.pop();
    }
    pathItems.pop();
    urlObject.pathname = `${pathItems.join("/")}/`;
    return urlObject.toString();
}
exports.getParentUri = getParentUri;
function getSlug(uri) {
    const urlObject = new URL(uri);
    const pathItems = urlObject.pathname.split("/");
    return pathItems[pathItems.length - 1] || pathItems[pathItems.length - 2];
}
exports.getSlug = getSlug;
function deleteResourceRdfFromContainer(resourceUri, dataset) {
    const parentUri = getParentUri(resourceUri);
    if (parentUri) {
        const parentNode = (0, data_model_1.namedNode)(parentUri);
        const resourceNode = (0, data_model_1.namedNode)(resourceUri);
        dataset.delete((0, data_model_1.quad)(parentNode, exports.ldpContains, resourceNode, parentNode));
        dataset.deleteMatches(resourceNode, undefined, undefined, parentNode);
    }
}
exports.deleteResourceRdfFromContainer = deleteResourceRdfFromContainer;
function addResourceRdfToContainer(resourceUri, dataset) {
    const parentUri = getParentUri(resourceUri);
    if (parentUri) {
        const parentNode = (0, data_model_1.namedNode)(parentUri);
        const resourceNode = (0, data_model_1.namedNode)(resourceUri);
        dataset.add((0, data_model_1.quad)(parentNode, exports.ldpContains, resourceNode, parentNode));
        dataset.add((0, data_model_1.quad)(resourceNode, exports.rdfType, exports.ldpResource, parentNode));
        if ((0, uriTypes_1.isContainerUri)(resourceUri)) {
            dataset.add((0, data_model_1.quad)(resourceNode, exports.rdfType, exports.ldpBasicContainer, parentNode));
            dataset.add((0, data_model_1.quad)(resourceNode, exports.rdfType, exports.ldpContainer, parentNode));
        }
        addResourceRdfToContainer(parentUri, dataset);
    }
}
exports.addResourceRdfToContainer = addResourceRdfToContainer;
async function addRawTurtleToDataset(rawTurtle, dataset, baseUri) {
    let loadedDataset;
    try {
        loadedDataset = await (0, ldo_1.parseRdf)(rawTurtle, {
            baseIRI: baseUri,
        });
    }
    catch (err) {
        const error = ErrorResult_1.UnexpectedResourceError.fromThrown(baseUri, err);
        return new NoncompliantPodError_1.NoncompliantPodError(baseUri, `Request at ${baseUri} returned noncompliant turtle: ${error.message}`);
    }
    const graphNode = (0, data_model_1.namedNode)(baseUri);
    dataset.deleteMatches(undefined, undefined, undefined, graphNode);
    dataset.addAll(loadedDataset.map((quad) => (0, data_model_1.quad)(quad.subject, quad.predicate, quad.object, graphNode)));
}
exports.addRawTurtleToDataset = addRawTurtleToDataset;
//# sourceMappingURL=rdfUtils.js.map