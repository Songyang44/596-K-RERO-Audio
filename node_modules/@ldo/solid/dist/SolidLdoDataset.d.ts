import { LdoDataset } from "@ldo/ldo";
import type { DatasetChanges } from "@ldo/rdf-utils";
import type { Dataset, DatasetFactory, Quad } from "@rdfjs/types";
import type { UpdateResultError } from "./requester/requests/updateDataResource";
import { AggregateError } from "./requester/results/error/ErrorResult";
import { InvalidUriError } from "./requester/results/error/InvalidUriError";
import type { AggregateSuccess } from "./requester/results/success/SuccessResult";
import type { UpdateSuccess } from "./requester/results/success/UpdateSuccess";
import type { Container } from "./resource/Container";
import type { Leaf } from "./resource/Leaf";
import type { ResourceResult } from "./resource/resourceResult/ResourceResult";
import type { ResourceGetterOptions } from "./ResourceStore";
import type { SolidLdoDatasetContext } from "./SolidLdoDatasetContext";
import type { ContainerUri, LeafUri } from "./util/uriTypes";
export declare class SolidLdoDataset extends LdoDataset {
    context: SolidLdoDatasetContext;
    constructor(context: SolidLdoDatasetContext, datasetFactory: DatasetFactory, initialDataset?: Dataset);
    getResource(uri: ContainerUri, options?: ResourceGetterOptions): Container;
    getResource(uri: LeafUri, options?: ResourceGetterOptions): Leaf;
    getResource(uri: string, options?: ResourceGetterOptions): Leaf | Container;
    commitChangesToPod(changes: DatasetChanges<Quad>): Promise<AggregateSuccess<ResourceResult<UpdateSuccess, Leaf>> | AggregateError<UpdateResultError | InvalidUriError>>;
}
