"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolidLdoDataset = void 0;
const ldo_1 = require("@ldo/ldo");
const ErrorResult_1 = require("./requester/results/error/ErrorResult");
const InvalidUriError_1 = require("./requester/results/error/InvalidUriError");
const splitChangesByGraph_1 = require("./util/splitChangesByGraph");
const uriTypes_1 = require("./util/uriTypes");
class SolidLdoDataset extends ldo_1.LdoDataset {
    constructor(context, datasetFactory, initialDataset) {
        super(datasetFactory, initialDataset);
        this.context = context;
    }
    getResource(uri, options) {
        return this.context.resourceStore.get(uri, options);
    }
    async commitChangesToPod(changes) {
        const changesByGraph = (0, splitChangesByGraph_1.splitChangesByGraph)(changes);
        const results = await Promise.all(Array.from(changesByGraph.entries()).map(async ([graph, datasetChanges]) => {
            if (graph.termType === "DefaultGraph") {
                this.bulk(datasetChanges);
                return [
                    graph,
                    datasetChanges,
                    { type: "defaultGraph", isError: false },
                ];
            }
            if ((0, uriTypes_1.isContainerUri)(graph.value)) {
                return [
                    graph,
                    datasetChanges,
                    new InvalidUriError_1.InvalidUriError(graph.value, `Container URIs are not allowed for custom data.`),
                ];
            }
            const resource = this.getResource(graph.value);
            return [graph, datasetChanges, await resource.update(datasetChanges)];
        }));
        const errors = results.filter((result) => result[2].isError);
        if (errors.length > 0) {
            return new ErrorResult_1.AggregateError(errors.map((result) => result[2]));
        }
        return {
            isError: false,
            type: "aggregateSuccess",
            results: results
                .map((result) => result[2])
                .filter((result) => result.type === "updateSuccess"),
        };
    }
}
exports.SolidLdoDataset = SolidLdoDataset;
//# sourceMappingURL=SolidLdoDataset.js.map