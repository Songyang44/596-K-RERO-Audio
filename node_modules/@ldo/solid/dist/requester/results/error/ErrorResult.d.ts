import type { RequesterResult } from "../RequesterResult";
export declare abstract class ErrorResult extends Error implements RequesterResult {
    abstract type: string;
    readonly isError: true;
    constructor(message?: string);
}
export declare abstract class ResourceError extends ErrorResult {
    readonly uri: string;
    constructor(uri: string, message?: string);
}
export declare class AggregateError<ErrorType extends ErrorResult> extends ErrorResult {
    readonly type: "aggregateError";
    readonly errors: ErrorType[];
    constructor(errors: (ErrorType | AggregateError<ErrorType>)[], message?: string);
}
export declare class UnexpectedResourceError extends ResourceError {
    readonly type: "unexpectedResourceError";
    error: Error;
    constructor(uri: string, error: Error);
    static fromThrown(uri: string, err: unknown): UnexpectedResourceError;
}
