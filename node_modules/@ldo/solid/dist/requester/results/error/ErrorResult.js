"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnexpectedResourceError = exports.AggregateError = exports.ResourceError = exports.ErrorResult = void 0;
class ErrorResult extends Error {
    constructor(message) {
        super(message || "An error unkown error was encountered.");
        this.isError = true;
    }
}
exports.ErrorResult = ErrorResult;
class ResourceError extends ErrorResult {
    constructor(uri, message) {
        super(message || `An error unkown error for ${uri}`);
        this.uri = uri;
    }
}
exports.ResourceError = ResourceError;
class AggregateError extends ErrorResult {
    constructor(errors, message) {
        const allErrors = [];
        errors.forEach((error) => {
            if (error instanceof AggregateError) {
                error.errors.forEach((subError) => {
                    allErrors.push(subError);
                });
            }
            else {
                allErrors.push(error);
            }
        });
        super(message ||
            `Encountered multiple errors:${allErrors.reduce((agg, cur) => `${agg}\n${cur}`, "")}`);
        this.type = "aggregateError";
        this.errors = allErrors;
    }
}
exports.AggregateError = AggregateError;
class UnexpectedResourceError extends ResourceError {
    constructor(uri, error) {
        super(uri, error.message);
        this.type = "unexpectedResourceError";
        this.error = error;
    }
    static fromThrown(uri, err) {
        if (err instanceof Error) {
            return new UnexpectedResourceError(uri, err);
        }
        else if (typeof err === "string") {
            return new UnexpectedResourceError(uri, new Error(err));
        }
        else {
            return new UnexpectedResourceError(uri, new Error(`Error of type ${typeof err} thrown: ${err}`));
        }
    }
}
exports.UnexpectedResourceError = UnexpectedResourceError;
//# sourceMappingURL=ErrorResult.js.map