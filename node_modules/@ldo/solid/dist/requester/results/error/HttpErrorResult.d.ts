import { ResourceError } from "./ErrorResult";
export type HttpErrorResultType = ServerHttpError | UnexpectedHttpError | UnauthenticatedHttpError;
export declare abstract class HttpErrorResult extends ResourceError {
    readonly status: number;
    readonly headers: Headers;
    readonly response: Response;
    constructor(uri: string, response: Response, message?: string);
    getBodyForDebug(): Promise<string>;
    static isnt(response: Response): boolean;
    static checkResponse(uri: string, response: Response): ServerHttpError | UnexpectedHttpError | UnauthenticatedHttpError | undefined;
}
export declare class UnexpectedHttpError extends HttpErrorResult {
    readonly type: "unexpectedHttpError";
}
export declare class UnauthenticatedHttpError extends HttpErrorResult {
    readonly type: "unauthenticatedError";
    static is(response: Response): boolean;
}
export declare class ServerHttpError extends HttpErrorResult {
    readonly type: "serverError";
    static is(response: Response): boolean;
}
