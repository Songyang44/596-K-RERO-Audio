import type { DatasetChanges } from "@ldo/rdf-utils";
import type { Quad } from "@rdfjs/types";
import type { SolidLdoDatasetContext } from "../SolidLdoDatasetContext";
import type { LeafUri } from "../util/uriTypes";
import { Requester } from "./Requester";
import type { LeafCreateAndOverwriteResult, LeafCreateIfAbsentResult } from "./requests/createDataResource";
import type { ReadLeafResult } from "./requests/readResource";
import type { UpdateResult } from "./requests/updateDataResource";
export declare const UPDATE_KEY = "update";
export declare const UPLOAD_KEY = "upload";
export declare class LeafRequester extends Requester {
    readonly uri: LeafUri;
    constructor(uri: LeafUri, context: SolidLdoDatasetContext);
    isUpdating(): boolean;
    isUploading(): boolean;
    read(): Promise<ReadLeafResult>;
    createDataResource(overwrite: true): Promise<LeafCreateAndOverwriteResult>;
    createDataResource(overwrite?: false): Promise<LeafCreateIfAbsentResult>;
    createDataResource(overwrite?: boolean): Promise<LeafCreateIfAbsentResult | LeafCreateAndOverwriteResult>;
    updateDataResource(changes: DatasetChanges<Quad>): Promise<UpdateResult>;
    upload(blob: Blob, mimeType: string, overwrite: true): Promise<LeafCreateAndOverwriteResult>;
    upload(blob: Blob, mimeType: string, overwrite?: false): Promise<LeafCreateIfAbsentResult>;
    upload(blob: Blob, mimeType: string, overwrite?: boolean): Promise<LeafCreateAndOverwriteResult | LeafCreateIfAbsentResult>;
}
