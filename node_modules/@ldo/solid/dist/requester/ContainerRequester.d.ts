import type { SolidLdoDatasetContext } from "../SolidLdoDatasetContext";
import type { ContainerUri } from "../util/uriTypes";
import { Requester } from "./Requester";
import type { CheckRootResult } from "./requests/checkRootContainer";
import type { ContainerCreateAndOverwriteResult, ContainerCreateIfAbsentResult } from "./requests/createDataResource";
import type { ReadContainerResult } from "./requests/readResource";
export declare const IS_ROOT_CONTAINER_KEY = "isRootContainer";
export declare class ContainerRequester extends Requester {
    readonly uri: ContainerUri;
    constructor(uri: ContainerUri, context: SolidLdoDatasetContext);
    read(): Promise<ReadContainerResult>;
    createDataResource(overwrite: true): Promise<ContainerCreateAndOverwriteResult>;
    createDataResource(overwrite?: false): Promise<ContainerCreateIfAbsentResult>;
    createDataResource(overwrite?: boolean): Promise<ContainerCreateIfAbsentResult | ContainerCreateAndOverwriteResult>;
    isRootContainer(): Promise<CheckRootResult>;
}
