import { RequestBatcher } from "../util/RequestBatcher";
import type { SolidLdoDatasetContext } from "../SolidLdoDatasetContext";
import type { ContainerCreateAndOverwriteResult, ContainerCreateIfAbsentResult, LeafCreateAndOverwriteResult, LeafCreateIfAbsentResult } from "./requests/createDataResource";
import type { ReadContainerResult, ReadLeafResult } from "./requests/readResource";
import type { DeleteResult } from "./requests/deleteResource";
export declare abstract class Requester {
    protected readonly requestBatcher: RequestBatcher;
    abstract readonly uri: string;
    protected context: SolidLdoDatasetContext;
    constructor(context: SolidLdoDatasetContext);
    isLoading(): boolean;
    isCreating(): boolean;
    isReading(): boolean;
    isDeletinng(): boolean;
    read(): Promise<ReadLeafResult | ReadContainerResult>;
    delete(): Promise<DeleteResult>;
    createDataResource(overwrite: true): Promise<ContainerCreateAndOverwriteResult | LeafCreateAndOverwriteResult>;
    createDataResource(overwrite?: false): Promise<ContainerCreateIfAbsentResult | LeafCreateIfAbsentResult>;
    createDataResource(overwrite?: boolean): Promise<ContainerCreateAndOverwriteResult | LeafCreateAndOverwriteResult | ContainerCreateIfAbsentResult | LeafCreateIfAbsentResult>;
}
