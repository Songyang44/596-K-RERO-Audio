"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkRootContainer = exports.checkHeadersForRootContainer = void 0;
const http_link_header_1 = require("http-link-header");
const NoncompliantPodError_1 = require("../results/error/NoncompliantPodError");
const HttpErrorResult_1 = require("../results/error/HttpErrorResult");
const ErrorResult_1 = require("../results/error/ErrorResult");
const guaranteeFetch_1 = require("../../util/guaranteeFetch");
function checkHeadersForRootContainer(uri, headers) {
    const linkHeader = headers.get("link");
    if (!linkHeader) {
        return new NoncompliantPodError_1.NoncompliantPodError(uri, "No link header present in request.");
    }
    const parsedLinkHeader = (0, http_link_header_1.parse)(linkHeader);
    const types = parsedLinkHeader.get("rel", "type");
    const isRootContainer = types.some((type) => type.uri === "http://www.w3.org/ns/pim/space#Storage");
    return {
        uri,
        isRootContainer,
        type: "checkRootContainerSuccess",
        isError: false,
    };
}
exports.checkHeadersForRootContainer = checkHeadersForRootContainer;
async function checkRootContainer(uri, options) {
    try {
        const fetch = (0, guaranteeFetch_1.guaranteeFetch)(options?.fetch);
        const response = await fetch(uri, { method: "HEAD" });
        const httpErrorResult = HttpErrorResult_1.HttpErrorResult.checkResponse(uri, response);
        if (httpErrorResult)
            return httpErrorResult;
        return checkHeadersForRootContainer(uri, response.headers);
    }
    catch (err) {
        return ErrorResult_1.UnexpectedResourceError.fromThrown(uri, err);
    }
}
exports.checkRootContainer = checkRootContainer;
//# sourceMappingURL=checkRootContainer.js.map