"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setAccessRules = void 0;
const solid_client_1 = require("@inrupt/solid-client");
const guaranteeFetch_1 = require("../../util/guaranteeFetch");
const uriTypes_1 = require("../../util/uriTypes");
const AccessControlError_1 = require("../results/error/AccessControlError");
async function setAccessRules(uri, newAccessRules, options) {
    console.warn("Access Control is stil underdeveloped. Use with caution.");
    const fetch = (0, guaranteeFetch_1.guaranteeFetch)(options?.fetch);
    const isContainer = (0, uriTypes_1.isContainerUri)(uri);
    const myDatasetWithAcl = await (0, solid_client_1.getSolidDatasetWithAcl)(uri, { fetch });
    let resourceAcl;
    if (!(0, solid_client_1.hasResourceAcl)(myDatasetWithAcl)) {
        if (!(0, solid_client_1.hasAccessibleAcl)(myDatasetWithAcl)) {
            return new AccessControlError_1.AccessRuleFetchError(uri, "The current user does not have permission to change access rights to this Resource.");
        }
        if (!(0, solid_client_1.hasFallbackAcl)(myDatasetWithAcl)) {
            return new AccessControlError_1.AccessRuleFetchError("The current user does not have permission to see who currently has access to this Resource.");
        }
        resourceAcl = (0, solid_client_1.createAclFromFallbackAcl)(myDatasetWithAcl);
    }
    else {
        resourceAcl = (0, solid_client_1.getResourceAcl)(myDatasetWithAcl);
    }
    let updatedAcl = resourceAcl;
    if (newAccessRules.public) {
        if (isContainer) {
            updatedAcl = (0, solid_client_1.setPublicDefaultAccess)(updatedAcl, newAccessRules.public);
        }
        else {
            updatedAcl = (0, solid_client_1.setPublicResourceAccess)(updatedAcl, newAccessRules.public);
        }
    }
    if (newAccessRules.agent) {
        const setAgentAccess = isContainer
            ? solid_client_1.setAgentDefaultAccess
            : solid_client_1.setAgentResourceAccess;
        Object.entries(newAccessRules.agent).forEach(([webId, rules]) => {
            updatedAcl = setAgentAccess(updatedAcl, webId, rules);
        });
    }
    await (0, solid_client_1.saveAclFor)(myDatasetWithAcl, updatedAcl, { fetch });
    return {
        isError: false,
        uri,
        type: "setAccessRuleSuccess",
    };
}
exports.setAccessRules = setAccessRules;
//# sourceMappingURL=setAccessRules.js.map