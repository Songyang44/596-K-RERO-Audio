"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteResource = void 0;
const data_model_1 = require("@rdfjs/data-model");
const guaranteeFetch_1 = require("../../util/guaranteeFetch");
const rdfUtils_1 = require("../../util/rdfUtils");
const ErrorResult_1 = require("../results/error/ErrorResult");
const HttpErrorResult_1 = require("../results/error/HttpErrorResult");
const HttpErrorResult_2 = require("../results/error/HttpErrorResult");
async function deleteResource(uri, options) {
    try {
        const fetch = (0, guaranteeFetch_1.guaranteeFetch)(options?.fetch);
        const response = await fetch(uri, {
            method: "delete",
        });
        const errorResult = HttpErrorResult_2.HttpErrorResult.checkResponse(uri, response);
        if (errorResult)
            return errorResult;
        if (response.status === 205 || response.status === 404) {
            if (options?.dataset) {
                options.dataset.deleteMatches(undefined, undefined, undefined, (0, data_model_1.namedNode)(uri));
                (0, rdfUtils_1.deleteResourceRdfFromContainer)(uri, options.dataset);
            }
            return {
                isError: false,
                type: "deleteSuccess",
                uri,
                resourceExisted: response.status === 205,
            };
        }
        return new HttpErrorResult_1.UnexpectedHttpError(uri, response);
    }
    catch (err) {
        return ErrorResult_1.UnexpectedResourceError.fromThrown(uri, err);
    }
}
exports.deleteResource = deleteResource;
//# sourceMappingURL=deleteResource.js.map