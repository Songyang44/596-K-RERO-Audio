"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Resource = void 0;
const setAccessRules_1 = require("../requester/requests/setAccessRules");
const events_1 = __importDefault(require("events"));
const rdfUtils_1 = require("../util/rdfUtils");
const ReadSuccess_1 = require("../requester/results/success/ReadSuccess");
class Resource extends events_1.default {
    constructor(context) {
        super();
        this.didInitialFetch = false;
        this.context = context;
    }
    isLoading() {
        return this.requester.isLoading();
    }
    isCreating() {
        return this.requester.isCreating();
    }
    isReading() {
        return this.requester.isReading();
    }
    isDeleting() {
        return this.requester.isDeletinng();
    }
    isDoingInitialFetch() {
        return this.isReading() && !this.isFetched();
    }
    isReloading() {
        return this.isReading() && this.isFetched();
    }
    isFetched() {
        return this.didInitialFetch;
    }
    isUnfetched() {
        return !this.didInitialFetch;
    }
    isAbsent() {
        return this.absent;
    }
    isPresent() {
        return this.absent === undefined ? undefined : !this.absent;
    }
    emitThisAndParent() {
        this.emit("update");
        const parentUri = (0, rdfUtils_1.getParentUri)(this.uri);
        if (parentUri) {
            const parentContainer = this.context.resourceStore.get(parentUri);
            parentContainer.emit("update");
        }
    }
    updateWithReadSuccess(result) {
        this.absent = result.type === "absentReadSuccess";
        this.didInitialFetch = true;
    }
    async handleRead() {
        const result = await this.requester.read();
        this.status = result;
        if (result.isError)
            return result;
        this.updateWithReadSuccess(result);
        this.emitThisAndParent();
        return result;
    }
    async readIfUnfetched() {
        if (this.didInitialFetch) {
            const readResult = this.toReadResult();
            this.status = readResult;
            return readResult;
        }
        return this.read();
    }
    updateWithDeleteSuccess(_result) {
        this.absent = true;
        this.didInitialFetch = true;
    }
    async handleDelete() {
        const result = await this.requester.delete();
        this.status = result;
        if (result.isError)
            return result;
        this.updateWithDeleteSuccess(result);
        this.emitThisAndParent();
        return result;
    }
    updateWithCreateSuccess(result) {
        this.absent = false;
        this.didInitialFetch = true;
        if ((0, ReadSuccess_1.isReadSuccess)(result)) {
            this.updateWithReadSuccess(result);
        }
    }
    async handleCreateAndOverwrite() {
        const result = await this.requester.createDataResource(true);
        this.status = result;
        if (result.isError)
            return result;
        this.updateWithCreateSuccess(result);
        this.emitThisAndParent();
        return result;
    }
    async handleCreateIfAbsent() {
        const result = await this.requester.createDataResource();
        this.status = result;
        if (result.isError)
            return result;
        this.updateWithCreateSuccess(result);
        this.emitThisAndParent();
        return result;
    }
    async setAccessRules(newAccessRules) {
        const result = await (0, setAccessRules_1.setAccessRules)(this.uri, newAccessRules, {
            fetch: this.context.fetch,
        });
        if (result.isError)
            return result;
        return { ...result, resource: this };
    }
}
exports.Resource = Resource;
//# sourceMappingURL=Resource.js.map