import { ContainerRequester } from "../requester/ContainerRequester";
import type { CheckRootResult, CheckRootResultError } from "../requester/requests/checkRootContainer";
import type { ContainerCreateAndOverwriteResult, ContainerCreateIfAbsentResult, LeafCreateAndOverwriteResult, LeafCreateIfAbsentResult } from "../requester/requests/createDataResource";
import type { DeleteResult, DeleteResultError } from "../requester/requests/deleteResource";
import type { ReadContainerResult, ReadResultError } from "../requester/requests/readResource";
import { AggregateError } from "../requester/results/error/ErrorResult";
import type { DeleteSuccess } from "../requester/results/success/DeleteSuccess";
import type { AbsentReadSuccess } from "../requester/results/success/ReadSuccess";
import type { ContainerReadSuccess } from "../requester/results/success/ReadSuccess";
import type { AggregateSuccess } from "../requester/results/success/SuccessResult";
import type { SolidLdoDatasetContext } from "../SolidLdoDatasetContext";
import type { ContainerUri, LeafUri } from "../util/uriTypes";
import type { Leaf } from "./Leaf";
import type { SharedStatuses } from "./Resource";
import { Resource } from "./Resource";
import type { ResourceResult } from "./resourceResult/ResourceResult";
export declare class Container extends Resource {
    readonly uri: ContainerUri;
    protected requester: ContainerRequester;
    protected rootContainer: boolean | undefined;
    readonly type: "container";
    readonly isError: false;
    status: SharedStatuses | ReadContainerResult | ContainerCreateAndOverwriteResult | ContainerCreateIfAbsentResult | CheckRootResult;
    constructor(uri: ContainerUri, context: SolidLdoDatasetContext);
    isRootContainer(): boolean | undefined;
    protected updateWithReadSuccess(result: ContainerReadSuccess | AbsentReadSuccess): void;
    read(): Promise<ResourceResult<ReadContainerResult, Container>>;
    protected toReadResult(): ResourceResult<ReadContainerResult, Container>;
    readIfUnfetched(): Promise<ResourceResult<ReadContainerResult, Container>>;
    private checkIfIsRootContainer;
    getRootContainer(): Promise<Container | CheckRootResultError>;
    getParentContainer(): Promise<Container | CheckRootResultError | undefined>;
    children(): (Leaf | Container)[];
    child(slug: ContainerUri): Container;
    child(slug: LeafUri): Leaf;
    child(slug: string): Leaf | Container;
    createChildAndOverwrite(slug: ContainerUri): Promise<ResourceResult<ContainerCreateAndOverwriteResult, Container>>;
    createChildAndOverwrite(slug: LeafUri): Promise<ResourceResult<LeafCreateAndOverwriteResult, Leaf>>;
    createChildAndOverwrite(slug: string): Promise<ResourceResult<ContainerCreateAndOverwriteResult | LeafCreateAndOverwriteResult, Leaf | Container>>;
    createChildIfAbsent(slug: ContainerUri): Promise<ResourceResult<ContainerCreateIfAbsentResult, Container>>;
    createChildIfAbsent(slug: LeafUri): Promise<ResourceResult<LeafCreateIfAbsentResult, Leaf>>;
    createChildIfAbsent(slug: string): Promise<ResourceResult<ContainerCreateIfAbsentResult | LeafCreateIfAbsentResult, Leaf | Container>>;
    uploadChildAndOverwrite(slug: LeafUri, blob: Blob, mimeType: string): Promise<ResourceResult<LeafCreateAndOverwriteResult, Leaf>>;
    uploadChildIfAbsent(slug: LeafUri, blob: Blob, mimeType: string): Promise<ResourceResult<LeafCreateIfAbsentResult, Leaf>>;
    clear(): Promise<ResourceResult<AggregateSuccess<ResourceResult<DeleteSuccess, Container | Leaf>> | AggregateError<DeleteResultError | ReadResultError>, Container>>;
    delete(): Promise<ResourceResult<DeleteResult | AggregateError<DeleteResultError | ReadResultError>, Container>>;
    createAndOverwrite(): Promise<ResourceResult<ContainerCreateAndOverwriteResult, Container>>;
    createIfAbsent(): Promise<ResourceResult<ContainerCreateIfAbsentResult, Container>>;
}
