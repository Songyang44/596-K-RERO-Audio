import type { DatasetChanges } from "@ldo/rdf-utils";
import type { Quad } from "@rdfjs/types";
import { LeafRequester } from "../requester/LeafRequester";
import type { CheckRootResultError } from "../requester/requests/checkRootContainer";
import type { LeafCreateAndOverwriteResult, LeafCreateIfAbsentResult } from "../requester/requests/createDataResource";
import type { DeleteResult } from "../requester/requests/deleteResource";
import type { ReadLeafResult } from "../requester/requests/readResource";
import type { UpdateResult } from "../requester/requests/updateDataResource";
import type { DeleteSuccess } from "../requester/results/success/DeleteSuccess";
import type { AbsentReadSuccess } from "../requester/results/success/ReadSuccess";
import type { BinaryReadSuccess, DataReadSuccess } from "../requester/results/success/ReadSuccess";
import type { ResourceSuccess } from "../requester/results/success/SuccessResult";
import type { SolidLdoDatasetContext } from "../SolidLdoDatasetContext";
import type { LeafUri } from "../util/uriTypes";
import type { Container } from "./Container";
import type { SharedStatuses } from "./Resource";
import { Resource } from "./Resource";
import type { ResourceResult } from "./resourceResult/ResourceResult";
export declare class Leaf extends Resource {
    readonly uri: LeafUri;
    protected requester: LeafRequester;
    readonly type: "leaf";
    readonly isError: false;
    status: SharedStatuses | ReadLeafResult | LeafCreateAndOverwriteResult | LeafCreateIfAbsentResult | UpdateResult;
    protected binaryData: {
        blob: Blob;
        mimeType: string;
    } | undefined;
    constructor(uri: LeafUri, context: SolidLdoDatasetContext);
    isUploading(): boolean;
    isUpdating(): boolean;
    getMimeType(): string | undefined;
    getBlob(): Blob | undefined;
    isBinary(): boolean | undefined;
    isDataResource(): boolean | undefined;
    protected updateWithReadSuccess(result: BinaryReadSuccess | DataReadSuccess | AbsentReadSuccess): void;
    read(): Promise<ResourceResult<ReadLeafResult, Leaf>>;
    protected toReadResult(): ResourceResult<ReadLeafResult, Leaf>;
    readIfUnfetched(): Promise<ResourceResult<ReadLeafResult, Leaf>>;
    getParentContainer(): Container;
    getRootContainer(): Promise<Container | CheckRootResultError>;
    protected updateWithDeleteSuccess(_result: DeleteSuccess): void;
    protected updateWithCreateSuccess(_result: ResourceSuccess): void;
    uploadAndOverwrite(blob: Blob, mimeType: string): Promise<ResourceResult<LeafCreateAndOverwriteResult, Leaf>>;
    uploadIfAbsent(blob: Blob, mimeType: string): Promise<ResourceResult<LeafCreateIfAbsentResult, Leaf>>;
    update(changes: DatasetChanges<Quad>): Promise<ResourceResult<UpdateResult, Leaf>>;
    delete(): Promise<DeleteResult>;
    createAndOverwrite(): Promise<ResourceResult<LeafCreateAndOverwriteResult, Leaf>>;
    createIfAbsent(): Promise<ResourceResult<LeafCreateIfAbsentResult, Leaf>>;
}
