"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContainerResource = void 0;
const solid_shapeTypes_1 = require("../../../../ldo/solid.shapeTypes");
const DataResource_1 = require("../DataResource");
class ContainerResource extends DataResource_1.DataResource {
    constructor(uri, dependencies) {
        super(uri, dependencies);
        this._contains = new Set();
        this.dependencies3 = dependencies;
    }
    get contains() {
        return Array.from(this._contains);
    }
    get binaryResourceStore() {
        return this.dependencies3.binaryResourceStore;
    }
    get dataResourceStore() {
        return this.dependencies3.dataResourceStore;
    }
    async fetchDocument() {
        const error = await super.fetchDocument();
        if (error) {
            return error;
        }
        const container = this.dataset
            .usingType(solid_shapeTypes_1.ContainerShapeType)
            .fromSubject(this.uri);
        const resourcesToAdd = [];
        container.contains?.forEach((resourceData) => {
            if (resourceData["@id"]) {
                if (resourceData.type?.some((type) => type["@id"] === "Container")) {
                    resourcesToAdd.push(this.containerResourceStore.get(resourceData["@id"]));
                }
                else {
                    if (resourceData["@id"].endsWith(".ttl")) {
                        resourcesToAdd.push(this.dataResourceStore.get(resourceData["@id"]));
                    }
                    else {
                        resourcesToAdd.push(this.binaryResourceStore.get(resourceData["@id"]));
                    }
                }
            }
        });
        this.addContainedResources(...resourcesToAdd);
    }
    addContainedResources(...resources) {
        let someResourceUpdated = false;
        resources.forEach((resource) => {
            if (!this._contains.has(resource)) {
                someResourceUpdated = true;
                this._contains.add(resource);
                this.parentContainer?.addContainedResources(this);
            }
        });
        if (someResourceUpdated) {
            this.emitStateUpdate();
        }
    }
    removeContainedResources(...resources) {
        let someResourceUpdated = false;
        resources.forEach((resource) => {
            if (this._contains.has(resource)) {
                someResourceUpdated = true;
                this._contains.delete(resource);
            }
        });
        if (someResourceUpdated) {
            this.emitStateUpdate();
        }
    }
}
exports.ContainerResource = ContainerResource;
//# sourceMappingURL=ContainerResource.js.map