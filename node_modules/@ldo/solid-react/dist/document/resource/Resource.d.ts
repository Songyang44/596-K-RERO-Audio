import type { FetchableDocumentDependencies } from "../FetchableDocument";
import { FetchableDocument } from "../FetchableDocument";
import type { AccessRulesStore } from "../accessRules/AccessRulesStore";
import type { ContainerResource } from "./dataResource/containerResource/ContainerResource";
import type { ContainerResourceStore } from "./dataResource/containerResource/ContainerResourceStore";
export interface ResourceDependencies extends FetchableDocumentDependencies {
    fetch: typeof fetch;
    accessRulesStore: AccessRulesStore;
    containerResourceStore: ContainerResourceStore;
}
export declare abstract class Resource extends FetchableDocument {
    readonly uri: string;
    private dependencies1;
    constructor(uri: string, dependencies: ResourceDependencies);
    get accessRules(): any;
    get parentContainer(): ContainerResource | undefined;
    get ["@id"](): string;
    protected get fetch(): any;
    protected get accessRulesStore(): any;
    protected get containerResourceStore(): any;
    delete(): Promise<void>;
    static normalizeUri(uri: string): string;
}
