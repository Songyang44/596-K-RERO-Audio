/// <reference types="node" />
import EventEmitter from "events";
import type { DocumentError } from "./errors/DocumentError";
export interface FetchableDocumentDependencies {
    onDocumentError?: (error: DocumentError) => void;
}
export declare abstract class FetchableDocument extends EventEmitter {
    protected _isLoading: boolean;
    protected _isWriting: boolean;
    protected _didInitialFetch: boolean;
    protected _error?: DocumentError;
    private dependencies;
    constructor(dependencies: FetchableDocumentDependencies);
    get isLoading(): boolean;
    get didInitialFetch(): boolean;
    get error(): DocumentError | undefined;
    get isWriting(): boolean;
    protected get onDocumentError(): any;
    read(): Promise<void>;
    reload(): Promise<void>;
    protected abstract fetchDocument(): Promise<DocumentError | undefined>;
    protected beginWrite(): void;
    protected endWrite(error?: DocumentError): void;
    setError(error: DocumentError): void;
    protected emitStateUpdate(): void;
    onStateUpdate(callback: () => void): void;
    offStateUpdate(callback: () => void): void;
}
