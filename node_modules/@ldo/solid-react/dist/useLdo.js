"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useLdo = void 0;
const react_1 = require("react");
const LdoContext_1 = require("./LdoContext");
const ldo_1 = require("@ldo/ldo");
const splitChangesByGraph_1 = require("./util/splitChangesByGraph");
function useLdo() {
    const { dataResourceStore, containerResourceStore, binaryResourceStore, accessRulesStore, dataset, } = (0, LdoContext_1.useLdoContext)();
    const changeData = (0, react_1.useCallback)((input, ...resources) => {
        const [transactionLdo] = (0, ldo_1.write)(...resources.map((r) => r.uri)).usingCopy(input);
        (0, ldo_1.startTransaction)(transactionLdo);
        return transactionLdo;
    }, [dataset]);
    const createData = (0, react_1.useCallback)((shapeType, subject, ...resources) => {
        const linkedDataObject = dataset
            .usingType(shapeType)
            .write(...resources.map((r) => r.uri))
            .fromSubject(subject);
        (0, ldo_1.startTransaction)(linkedDataObject);
        return linkedDataObject;
    }, []);
    const commitData = (0, react_1.useCallback)(async (input) => {
        const changes = (0, ldo_1.transactionChanges)(input);
        const changesByGraph = (0, splitChangesByGraph_1.splitChangesByGraph)(changes);
        await Promise.all(Array.from(changesByGraph.entries()).map(async ([graph, datasetChanges]) => {
            if (graph.termType === "DefaultGraph") {
                return;
            }
            const resource = dataResourceStore.get(graph.value);
            await resource.update(datasetChanges);
        }));
    }, [dataset, fetch]);
    return (0, react_1.useMemo)(() => ({
        dataset,
        changeData,
        createData,
        commitData,
        getDataResource: (uri) => dataResourceStore.get(uri),
        getBinaryResource: (uri) => binaryResourceStore.get(uri),
        getContainerResource: (uri) => containerResourceStore.get(uri),
        getAccessRules: (resource) => accessRulesStore.get(resource),
    }), [dataset, changeData, commitData]);
}
exports.useLdo = useLdo;
//# sourceMappingURL=useLdo.js.map