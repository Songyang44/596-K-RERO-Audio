import type { LdoDataset, ShapeType, LdoBase } from "@ldo/ldo";
import type { Resource } from "./document/resource/Resource";
import type { DataResource } from "./document/resource/dataResource/DataResource";
import type { BinaryResource } from "./document/resource/binaryResource/BinaryResource";
import type { ContainerResource } from "./document/resource/dataResource/containerResource/ContainerResource";
import type { AccessRules } from "./document/accessRules/AccessRules";
import type { SubjectType } from "@ldo/jsonld-dataset-proxy";
export interface UseLdoReturn {
    changeData<Type extends LdoBase>(input: Type, ...resources: Resource[]): Type;
    commitData(input: LdoBase): Promise<void>;
    createData<Type extends LdoBase>(shapeType: ShapeType<Type>, subject: string | SubjectType, ...resources: Resource[]): Type;
    dataset: LdoDataset;
    getDataResource: (uri: string) => DataResource;
    getBinaryResource: (uri: string) => BinaryResource;
    getContainerResource: (uri: string) => ContainerResource;
    getAccessRules: (resource: Resource) => AccessRules;
}
export declare function useLdo(): UseLdoReturn;
