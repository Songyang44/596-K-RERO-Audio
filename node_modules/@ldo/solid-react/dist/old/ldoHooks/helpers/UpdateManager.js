"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateManager = void 0;
const dataset_1 = require("@ldo/dataset");
const rdf_utils_1 = require("@ldo/rdf-utils");
class UpdateManager {
    constructor() {
        this.quadMatchListenerMap = {};
        this.listenerHashMap = new Map();
    }
    registerListener(quadMatch, callback) {
        const hash = (0, rdf_utils_1.quadMatchToString)(quadMatch);
        if (!this.quadMatchListenerMap[hash]) {
            this.quadMatchListenerMap[hash] = new Set();
        }
        if (!this.listenerHashMap.has(callback)) {
            this.listenerHashMap.set(callback, new Set());
        }
        this.quadMatchListenerMap[hash].add(callback);
        this.listenerHashMap.get(callback)?.add(hash);
    }
    removeListener(callback) {
        const hashSet = this.listenerHashMap.get(callback);
        if (hashSet) {
            hashSet.forEach((hash) => {
                this.quadMatchListenerMap[hash]?.delete(callback);
            });
        }
    }
    notifyListenersOfChanges(changes) {
        const listenersToNotify = new Set();
        const allQuads = (0, dataset_1.createDataset)();
        allQuads.addAll(changes.added || []);
        allQuads.addAll(changes.removed || []);
        allQuads.forEach((tempQuad) => {
            const quad = tempQuad;
            const quadMatches = [
                [null, null, null, null],
                [quad.subject, null, null, null],
                [quad.subject, quad.predicate, null, null],
                [quad.subject, null, quad.object, null],
                [null, quad.predicate, null, null],
                [null, quad.predicate, quad.object, null],
                [null, null, quad.object, null],
                [quad.subject, quad.predicate, quad.object, null],
            ];
            quadMatches.forEach((quadMatch) => {
                const hash = (0, rdf_utils_1.quadMatchToString)(quadMatch);
                this.quadMatchListenerMap[hash]?.forEach((callback) => {
                    listenersToNotify.add(callback);
                });
                delete this.quadMatchListenerMap[hash];
            });
        });
        listenersToNotify.forEach((listener) => {
            listener();
        });
    }
}
exports.UpdateManager = UpdateManager;
//# sourceMappingURL=UpdateManager.js.map