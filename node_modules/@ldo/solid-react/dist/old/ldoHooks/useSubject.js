"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSubject = void 0;
const data_model_1 = require("@rdfjs/data-model");
const jsonld_dataset_proxy_1 = require("@ldo/jsonld-dataset-proxy");
const ldo_1 = require("@ldo/ldo");
const LdoContext_1 = require("../LdoContext");
const react_1 = require("react");
const TrackingProxyContext_1 = require("./helpers/TrackingProxyContext");
function useSubject(shapeType, subject) {
    const { dataset, updateManager } = (0, LdoContext_1.useLdoContext)();
    const [forceUpdateCounter, setForceUpdateCounter] = (0, react_1.useState)(0);
    const forceUpdate = (0, react_1.useCallback)(() => setForceUpdateCounter((val) => val + 1), [setForceUpdateCounter]);
    const linkedDataObject = (0, react_1.useMemo)(() => {
        const contextUtil = new jsonld_dataset_proxy_1.ContextUtil(shapeType.context);
        const proxyContext = new TrackingProxyContext_1.TrackingProxyContext({
            dataset,
            contextUtil,
            writeGraphs: [(0, data_model_1.defaultGraph)()],
            languageOrdering: ["none", "en", "other"],
        }, updateManager, forceUpdate);
        const builder = new ldo_1.LdoBuilder(new jsonld_dataset_proxy_1.JsonldDatasetProxyBuilder(proxyContext), shapeType);
        return builder.fromSubject(subject);
    }, [
        shapeType,
        subject,
        dataset,
        updateManager,
        forceUpdateCounter,
        forceUpdate,
    ]);
    (0, react_1.useEffect)(() => {
        return () => updateManager.removeListener(forceUpdate);
    }, [shapeType, subject]);
    return [linkedDataObject, undefined];
}
exports.useSubject = useSubject;
//# sourceMappingURL=useSubject.js.map