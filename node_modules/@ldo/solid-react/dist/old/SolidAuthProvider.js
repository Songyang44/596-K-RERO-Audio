"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSolidAuth = exports.SolidAuthProvider = exports.SolidAuthContext = void 0;
const react_1 = require("react");
const solid_authn_react_native_1 = require("solid-authn-react-native");
const createGlobalHook_1 = require("./util/createGlobalHook");
const PRE_REDIRECT_URI = "PRE_REDIRECT_URI";
function useAuthGlobalHookFunc() {
    const [session, setSession] = (0, react_1.useState)((0, solid_authn_react_native_1.getDefaultSession)().info);
    const [ranInitialAuthCheck, setRanInitialAuthCheck] = (0, react_1.useState)(false);
    const runInitialAuthCheck = (0, react_1.useCallback)(async () => {
        if (!window.localStorage.getItem(PRE_REDIRECT_URI)) {
            window.localStorage.setItem(PRE_REDIRECT_URI, window.location.href);
        }
        await (0, solid_authn_react_native_1.handleIncomingRedirect)({
            restorePreviousSession: true,
        });
        setSession({ ...(0, solid_authn_react_native_1.getDefaultSession)().info });
        window.history.replaceState({}, "", window.localStorage.getItem(PRE_REDIRECT_URI));
        window.localStorage.removeItem(PRE_REDIRECT_URI);
        setRanInitialAuthCheck(true);
    }, []);
    const login = (0, react_1.useCallback)(async (issuer, clientName = "Solid App") => {
        window.localStorage.setItem(PRE_REDIRECT_URI, window.location.href);
        await (0, solid_authn_react_native_1.login)({
            oidcIssuer: issuer,
            redirectUrl: window.location.href,
            clientName,
        });
        setSession({ ...(0, solid_authn_react_native_1.getDefaultSession)().info });
    }, []);
    const logout = (0, react_1.useCallback)(async () => {
        await (0, solid_authn_react_native_1.logout)();
        setSession({ ...(0, solid_authn_react_native_1.getDefaultSession)().info });
    }, []);
    const signUp = (0, react_1.useCallback)(async (issuer) => {
        console.log(`Signup Pressed with issuer ${issuer}`);
    }, []);
    (0, react_1.useEffect)(() => {
        runInitialAuthCheck();
    }, []);
    return (0, react_1.useMemo)(() => ({
        runInitialAuthCheck,
        login,
        logout,
        signUp,
        session,
        ranInitialAuthCheck,
        fetch: solid_authn_react_native_1.fetch,
    }), [login, logout, ranInitialAuthCheck, runInitialAuthCheck, session, signUp]);
}
const authGlobalHook = (0, createGlobalHook_1.createGlobalHook)(useAuthGlobalHookFunc);
exports.SolidAuthContext = authGlobalHook.Context;
exports.SolidAuthProvider = authGlobalHook.Provider;
exports.useSolidAuth = authGlobalHook.useGlobal;
//# sourceMappingURL=SolidAuthProvider.js.map