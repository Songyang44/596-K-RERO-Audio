"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BrowserSolidLdoProvider = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const SolidAuthContext_1 = require("./SolidAuthContext");
const solid_client_authn_browser_1 = require("@inrupt/solid-client-authn-browser");
const SolidLdoProvider_1 = require("./SolidLdoProvider");
const PRE_REDIRECT_URI = "PRE_REDIRECT_URI";
const BrowserSolidLdoProvider = ({ children, }) => {
    const [session, setSession] = (0, react_1.useState)((0, solid_client_authn_browser_1.getDefaultSession)().info);
    const [ranInitialAuthCheck, setRanInitialAuthCheck] = (0, react_1.useState)(false);
    const runInitialAuthCheck = (0, react_1.useCallback)(async () => {
        if (!window.localStorage.getItem(PRE_REDIRECT_URI)) {
            window.localStorage.setItem(PRE_REDIRECT_URI, window.location.href);
        }
        await (0, solid_client_authn_browser_1.handleIncomingRedirect)({
            restorePreviousSession: true,
        });
        setSession({ ...(0, solid_client_authn_browser_1.getDefaultSession)().info });
        window.history.replaceState({}, "", window.localStorage.getItem(PRE_REDIRECT_URI));
        window.localStorage.removeItem(PRE_REDIRECT_URI);
        setRanInitialAuthCheck(true);
    }, []);
    const login = (0, react_1.useCallback)(async (issuer, options) => {
        const fullOptions = {
            redirectUrl: window.location.href,
            clientName: "Solid App",
            oidcIssuer: issuer,
            ...options,
        };
        window.localStorage.setItem(PRE_REDIRECT_URI, fullOptions.redirectUrl);
        await (0, solid_client_authn_browser_1.login)(fullOptions);
        setSession({ ...(0, solid_client_authn_browser_1.getDefaultSession)().info });
    }, []);
    const logout = (0, react_1.useCallback)(async () => {
        await (0, solid_client_authn_browser_1.logout)();
        setSession({ ...(0, solid_client_authn_browser_1.getDefaultSession)().info });
    }, []);
    const signUp = (0, react_1.useCallback)(async (issuer, options) => {
        return login(issuer, { ...options, prompt: "create" });
    }, [login]);
    (0, react_1.useEffect)(() => {
        runInitialAuthCheck();
    }, []);
    const solidAuthFunctions = (0, react_1.useMemo)(() => ({
        runInitialAuthCheck,
        login,
        logout,
        signUp,
        session,
        ranInitialAuthCheck,
        fetch: solid_client_authn_browser_1.fetch,
    }), [login, logout, ranInitialAuthCheck, runInitialAuthCheck, session, signUp]);
    return ((0, jsx_runtime_1.jsx)(SolidAuthContext_1.SolidAuthContext.Provider, { value: solidAuthFunctions, children: (0, jsx_runtime_1.jsx)(SolidLdoProvider_1.SolidLdoProvider, { children: children }) }));
};
exports.BrowserSolidLdoProvider = BrowserSolidLdoProvider;
//# sourceMappingURL=BrowserSolidLdoProvider.js.map