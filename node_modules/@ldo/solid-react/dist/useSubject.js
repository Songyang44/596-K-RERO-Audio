"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSubject = void 0;
const jsonld_dataset_proxy_1 = require("@ldo/jsonld-dataset-proxy");
const ldo_1 = require("@ldo/ldo");
const SolidLdoProvider_1 = require("./SolidLdoProvider");
const react_1 = require("react");
const TrackingProxyContext_1 = require("./util/TrackingProxyContext");
const data_model_1 = require("@rdfjs/data-model");
function useSubject(shapeType, subject) {
    const { dataset } = (0, SolidLdoProvider_1.useLdo)();
    const [forceUpdateCounter, setForceUpdateCounter] = (0, react_1.useState)(0);
    const forceUpdate = (0, react_1.useCallback)(() => setForceUpdateCounter((val) => val + 1), []);
    const linkedDataObject = (0, react_1.useMemo)(() => {
        if (!subject)
            return;
        dataset.removeListenerFromAllEvents(forceUpdate);
        const contextUtil = new jsonld_dataset_proxy_1.ContextUtil(shapeType.context);
        const proxyContext = new TrackingProxyContext_1.TrackingProxyContext({
            dataset,
            contextUtil,
            writeGraphs: [(0, data_model_1.defaultGraph)()],
            languageOrdering: ["none", "en", "other"],
        }, forceUpdate);
        const builder = new ldo_1.LdoBuilder(new jsonld_dataset_proxy_1.JsonldDatasetProxyBuilder(proxyContext), shapeType);
        return builder.fromSubject(subject);
    }, [shapeType, subject, dataset, forceUpdateCounter, forceUpdate]);
    (0, react_1.useEffect)(() => {
        return () => {
            dataset.removeListenerFromAllEvents(forceUpdate);
        };
    }, [shapeType, subject]);
    return linkedDataObject;
}
exports.useSubject = useSubject;
//# sourceMappingURL=useSubject.js.map