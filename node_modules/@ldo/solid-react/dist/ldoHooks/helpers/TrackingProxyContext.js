"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrackingProxyContext = void 0;
const jsonld_dataset_proxy_1 = require("@ldo/jsonld-dataset-proxy");
const data_model_1 = require("@rdfjs/data-model");
class TrackingProxyContext extends jsonld_dataset_proxy_1.ProxyContext {
    constructor(options, updateManager, listener) {
        super(options);
        this.updateManager = updateManager;
        this.listener = listener;
    }
    createSubjectHandler() {
        const baseHandler = super.createSubjectHandler();
        const oldGetFunction = baseHandler.get;
        const newGetFunction = (target, key, receiver) => {
            const subject = target["@id"];
            if (typeof key === "symbol") {
            }
            else if (key === "@id") {
                this.updateManager.registerListener([subject, null, null], this.listener);
            }
            else if (!this.contextUtil.isArray(key)) {
                const predicate = (0, data_model_1.namedNode)(this.contextUtil.keyToIri(key));
                this.updateManager.registerListener([subject, predicate, null], this.listener);
            }
            return oldGetFunction && oldGetFunction(target, key, receiver);
        };
        baseHandler.get = newGetFunction;
        baseHandler.set = () => {
            console.warn("You've attempted to set a value on a Linked Data Object from the useSubject, useMatchingSubject, or useMatchingObject hooks. These linked data objects should only be used to render data, not modify it. To modify data, use the `changeData` function.");
            return true;
        };
        return baseHandler;
    }
    createArrayHandler() {
        const baseHandler = super.createArrayHandler();
        const oldGetFunction = baseHandler.get;
        const newGetFunction = (target, key, receiver) => {
            if (qualifiedArrayMethods.has(key)) {
                this.updateManager.registerListener([target[0][0], target[0][1], target[0][2]], this.listener);
            }
            return oldGetFunction && oldGetFunction(target, key, receiver);
        };
        baseHandler.get = newGetFunction;
        return baseHandler;
    }
}
exports.TrackingProxyContext = TrackingProxyContext;
const qualifiedArrayMethods = new Set([
    "forEach",
    "map",
    "reduce",
    Symbol.iterator,
    "entries",
    "every",
    "filter",
    "find",
    "findIndex",
    "findLast",
    "findLastIndex",
    "includes, indexOf",
    "keys",
    "lastIndexOf",
    "reduceRight",
    "some",
    "values",
]);
//# sourceMappingURL=TrackingProxyContext.js.map