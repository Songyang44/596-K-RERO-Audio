"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const rdf_utils_1 = require("@ldo/rdf-utils");
const ProxyTransactionalDataset_1 = __importDefault(require("./ProxyTransactionalDataset"));
class WrapperSubscribableDataset {
    constructor(datasetFactory, initialDataset) {
        this.listenerHashMap = new Map();
        this.datasetFactory = datasetFactory;
        this.dataset = initialDataset || this.datasetFactory.dataset();
        this.eventEmitter = new events_1.EventEmitter();
    }
    addAll(quads) {
        this.dataset.addAll(quads);
        this.triggerSubscriptionForQuads({
            added: this.datasetFactory.dataset(quads),
        });
        return this;
    }
    bulk(changed) {
        if (changed.added) {
            this.dataset.addAll(changed.added);
        }
        if (changed.removed) {
            changed.removed.forEach((quad) => {
                this.dataset.delete(quad);
            });
        }
        this.triggerSubscriptionForQuads(changed);
        return this;
    }
    contains(other) {
        return this.dataset.contains(other);
    }
    deleteMatches(subject, predicate, object, graph) {
        const matching = this.dataset.match(subject, predicate, object, graph);
        for (const quad of matching) {
            this.dataset.delete(quad);
        }
        this.triggerSubscriptionForQuads({ removed: matching });
        return this;
    }
    difference(other) {
        return this.dataset.difference(other);
    }
    equals(other) {
        return this.dataset.equals(other);
    }
    every(iteratee) {
        return this.dataset.every((quad) => iteratee(quad, this));
    }
    filter(iteratee) {
        return this.dataset.filter((quad) => iteratee(quad, this));
    }
    forEach(iteratee) {
        return this.dataset.forEach((quad) => iteratee(quad, this));
    }
    async import(stream) {
        await this.dataset.import(stream);
        return this;
    }
    intersection(other) {
        return this.dataset.intersection(other);
    }
    map(iteratee) {
        return this.dataset.map((quad) => iteratee(quad, this));
    }
    reduce(iteratee, initialValue) {
        return this.dataset.reduce((acc, quad) => iteratee(acc, quad, this), initialValue);
    }
    some(iteratee) {
        return this.dataset.some((quad) => iteratee(quad, this));
    }
    toArray() {
        return this.dataset.toArray();
    }
    toCanonical() {
        return this.dataset.toCanonical();
    }
    toStream() {
        return this.dataset.toStream();
    }
    toString() {
        return this.dataset.toString();
    }
    union(quads) {
        return this.dataset.union(quads);
    }
    match(subject, predicate, object, graph) {
        return this.dataset.match(subject, predicate, object, graph);
    }
    get size() {
        return this.dataset.size;
    }
    add(quad) {
        this.dataset.add(quad);
        this.triggerSubscriptionForQuads({
            added: this.datasetFactory.dataset([quad]),
        });
        return this;
    }
    delete(quad) {
        this.dataset.delete(quad);
        this.triggerSubscriptionForQuads({
            removed: this.datasetFactory.dataset([quad]),
        });
        return this;
    }
    has(quad) {
        return this.dataset.has(quad);
    }
    [Symbol.iterator]() {
        return this.dataset[Symbol.iterator]();
    }
    triggerSubscriptionForQuads(changed) {
        const matchingDatasetChanges = {};
        const populateMatchingDatasetChanges = (changeType) => {
            const changedQuads = changed[changeType];
            changedQuads?.forEach((changedQuad) => {
                const quad = changedQuad;
                const quadMatches = [
                    [null, null, null, null],
                    [quad.subject, null, null, null],
                    [quad.subject, quad.predicate, null, null],
                    [quad.subject, null, quad.object, null],
                    [null, quad.predicate, null, null],
                    [null, quad.predicate, quad.object, null],
                    [null, null, quad.object, null],
                    [quad.subject, quad.predicate, quad.object, null],
                    [null, null, null, quad.graph],
                    [quad.subject, null, null, quad.graph],
                    [quad.subject, quad.predicate, null, quad.graph],
                    [quad.subject, null, quad.object, quad.graph],
                    [null, quad.predicate, null, quad.graph],
                    [null, quad.predicate, quad.object, quad.graph],
                    [null, null, quad.object, quad.graph],
                    [quad.subject, quad.predicate, quad.object, quad.graph],
                ];
                quadMatches.forEach((quadMatch) => {
                    const eventName = (0, rdf_utils_1.quadMatchToString)(quadMatch);
                    if (this.eventEmitter.listenerCount(eventName) > 0) {
                        if (!matchingDatasetChanges[eventName]) {
                            matchingDatasetChanges[eventName] = {};
                        }
                        if (!matchingDatasetChanges[eventName][changeType]) {
                            matchingDatasetChanges[eventName][changeType] =
                                this.datasetFactory.dataset();
                        }
                        matchingDatasetChanges[eventName][changeType]?.add(changedQuad);
                    }
                });
            });
        };
        populateMatchingDatasetChanges("added");
        populateMatchingDatasetChanges("removed");
        Object.entries(matchingDatasetChanges).forEach(([quadMatchString, changes]) => {
            this.eventEmitter.emit(quadMatchString, changes);
        });
    }
    addListener(eventName, listener) {
        return this.on(eventName, listener);
    }
    emit(eventName, changes) {
        return this.eventEmitter.emit((0, rdf_utils_1.quadMatchToString)(eventName), changes);
    }
    eventNames() {
        return this.eventEmitter
            .eventNames()
            .map((eventName) => (0, rdf_utils_1.stringToQuadMatch)(eventName));
    }
    getMaxListeners() {
        return this.eventEmitter.getMaxListeners();
    }
    listenerCount(eventName) {
        return this.eventEmitter.listenerCount((0, rdf_utils_1.quadMatchToString)(eventName));
    }
    listeners(eventName) {
        return this.eventEmitter.listeners((0, rdf_utils_1.quadMatchToString)(eventName));
    }
    off(eventName, listener) {
        this.removeListener(eventName, listener);
    }
    on(eventName, listener) {
        const eventString = (0, rdf_utils_1.quadMatchToString)(eventName);
        if (!this.listenerHashMap.has(listener)) {
            this.listenerHashMap.set(listener, new Set());
        }
        this.listenerHashMap.get(listener)?.add(eventString);
        this.eventEmitter.on(eventString, listener);
        return this;
    }
    once(eventName, listener) {
        this.eventEmitter.once((0, rdf_utils_1.quadMatchToString)(eventName), listener);
        return this;
    }
    prependListener(eventName, listener) {
        this.eventEmitter.prependListener((0, rdf_utils_1.quadMatchToString)(eventName), listener);
        return this;
    }
    prependOnceListener(eventName, listener) {
        this.eventEmitter.prependOnceListener((0, rdf_utils_1.quadMatchToString)(eventName), listener);
        return this;
    }
    removeAllListeners(eventName) {
        this.eventEmitter.removeAllListeners((0, rdf_utils_1.quadMatchToString)(eventName));
        return this;
    }
    removeListener(eventName, listener) {
        this.eventEmitter.removeListener((0, rdf_utils_1.quadMatchToString)(eventName), listener);
        return this;
    }
    removeListenerFromAllEvents(listener) {
        const eventStringSet = this.listenerHashMap.get(listener);
        if (eventStringSet) {
            eventStringSet.forEach((eventString) => {
                this.eventEmitter.off(eventString, listener);
            });
        }
        return this;
    }
    setMaxListeners(n) {
        this.eventEmitter.setMaxListeners(n);
        return this;
    }
    rawListeners(eventName) {
        return this.eventEmitter.rawListeners((0, rdf_utils_1.quadMatchToString)(eventName));
    }
    startTransaction() {
        return new ProxyTransactionalDataset_1.default(this, this.datasetFactory);
    }
}
exports.default = WrapperSubscribableDataset;
//# sourceMappingURL=WrapperSubscribableDataset.js.map