import type { DatasetChanges, QuadMatch } from "@ldo/rdf-utils";
import type { Dataset, BaseQuad, Stream, Term, DatasetFactory } from "@rdfjs/types";
import type { nodeEventListener, SubscribableDataset, TransactionalDataset } from "./types";
export default class WrapperSubscribableDataset<InAndOutQuad extends BaseQuad = BaseQuad> implements SubscribableDataset<InAndOutQuad> {
    private datasetFactory;
    private dataset;
    private eventEmitter;
    private listenerHashMap;
    constructor(datasetFactory: DatasetFactory<InAndOutQuad, InAndOutQuad>, initialDataset?: Dataset<InAndOutQuad, InAndOutQuad>);
    addAll(quads: Dataset<InAndOutQuad, InAndOutQuad> | InAndOutQuad[]): this;
    bulk(changed: DatasetChanges<InAndOutQuad>): this;
    contains(other: Dataset<InAndOutQuad, InAndOutQuad>): boolean;
    deleteMatches(subject?: Term, predicate?: Term, object?: Term, graph?: Term): this;
    difference(other: Dataset<InAndOutQuad, InAndOutQuad>): Dataset<InAndOutQuad, InAndOutQuad>;
    equals(other: Dataset<InAndOutQuad, InAndOutQuad>): boolean;
    every(iteratee: (quad: InAndOutQuad, dataset: this) => boolean): boolean;
    filter(iteratee: (quad: InAndOutQuad, dataset: this) => boolean): Dataset<InAndOutQuad, InAndOutQuad>;
    forEach(iteratee: (quad: InAndOutQuad, dataset: this) => void): void;
    import(stream: Stream<InAndOutQuad>): Promise<this>;
    intersection(other: Dataset<InAndOutQuad, InAndOutQuad>): Dataset<InAndOutQuad, InAndOutQuad>;
    map(iteratee: (quad: InAndOutQuad, dataset: this) => InAndOutQuad): Dataset<InAndOutQuad, InAndOutQuad>;
    reduce<A = unknown>(iteratee: (accumulator: A, quad: InAndOutQuad, dataset: this) => A, initialValue?: A): A;
    some(iteratee: (quad: InAndOutQuad, dataset: this) => boolean): boolean;
    toArray(): InAndOutQuad[];
    toCanonical(): string;
    toStream(): Stream<InAndOutQuad>;
    toString(): string;
    union(quads: Dataset<InAndOutQuad, InAndOutQuad>): Dataset<InAndOutQuad, InAndOutQuad>;
    match(subject?: Term | null, predicate?: Term | null, object?: Term | null, graph?: Term | null): Dataset<InAndOutQuad, InAndOutQuad>;
    get size(): number;
    add(quad: InAndOutQuad): this;
    delete(quad: InAndOutQuad): this;
    has(quad: InAndOutQuad): boolean;
    [Symbol.iterator](): Iterator<InAndOutQuad, unknown, undefined>;
    private triggerSubscriptionForQuads;
    addListener(eventName: QuadMatch, listener: nodeEventListener<InAndOutQuad>): this;
    emit(eventName: QuadMatch, changes: DatasetChanges<InAndOutQuad>): boolean;
    eventNames(): QuadMatch[];
    getMaxListeners(): number;
    listenerCount(eventName: QuadMatch): number;
    listeners(eventName: QuadMatch): nodeEventListener<InAndOutQuad>[];
    off(eventName: QuadMatch, listener: nodeEventListener<InAndOutQuad>): void;
    on(eventName: QuadMatch, listener: nodeEventListener<InAndOutQuad>): this;
    once(eventName: QuadMatch, listener: nodeEventListener<InAndOutQuad>): this;
    prependListener(eventName: QuadMatch, listener: nodeEventListener<InAndOutQuad>): this;
    prependOnceListener(eventName: QuadMatch, listener: nodeEventListener<InAndOutQuad>): this;
    removeAllListeners(eventName: QuadMatch): this;
    removeListener(eventName: QuadMatch, listener: nodeEventListener<InAndOutQuad>): this;
    removeListenerFromAllEvents(listener: nodeEventListener<InAndOutQuad>): this;
    setMaxListeners(n: number): this;
    rawListeners(eventName: QuadMatch): nodeEventListener<InAndOutQuad>[];
    startTransaction(): TransactionalDataset<InAndOutQuad>;
}
