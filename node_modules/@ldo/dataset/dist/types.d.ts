import type { Dataset, NamedNode, BlankNode, DefaultGraph, BaseQuad } from "@rdfjs/types";
export interface DatasetChanges<InAndOutQuad extends BaseQuad = BaseQuad> {
    added?: Dataset<InAndOutQuad, InAndOutQuad>;
    removed?: Dataset<InAndOutQuad, InAndOutQuad>;
}
export type SubscribableTerms = NamedNode | BlankNode | DefaultGraph;
export type nodeEventListener<InAndOutQuad extends BaseQuad = BaseQuad> = (dataset: Dataset<InAndOutQuad, InAndOutQuad>, changes: DatasetChanges<InAndOutQuad>) => void;
export interface BulkEditableDataset<InAndOutQuad extends BaseQuad = BaseQuad> extends Dataset<InAndOutQuad, InAndOutQuad> {
    bulk(changes: DatasetChanges<InAndOutQuad>): this;
}
export interface TransactionalDataset<InAndOutQuad extends BaseQuad = BaseQuad> extends Dataset<InAndOutQuad, InAndOutQuad> {
    rollback(): void;
    commit(): void;
    getChanges(): DatasetChanges<InAndOutQuad>;
}
export interface SubscribableDataset<InAndOutQuad extends BaseQuad = BaseQuad> extends BulkEditableDataset<InAndOutQuad> {
    addListener(eventName: SubscribableTerms, listener: nodeEventListener<InAndOutQuad>): this;
    emit(eventName: SubscribableTerms, dataset: Dataset<InAndOutQuad, InAndOutQuad>, datasetChanges: DatasetChanges<InAndOutQuad>): boolean;
    eventNames(): SubscribableTerms[];
    getMaxListeners(): number;
    listenerCount(eventName: SubscribableTerms): number;
    listeners(eventName: SubscribableTerms): nodeEventListener<InAndOutQuad>[];
    off(eventName: SubscribableTerms, listener: nodeEventListener<InAndOutQuad>): void;
    on(eventName: SubscribableTerms, listener: nodeEventListener<InAndOutQuad>): this;
    once(eventName: SubscribableTerms, listener: nodeEventListener<InAndOutQuad>): this;
    prependListener(eventName: SubscribableTerms, listener: nodeEventListener<InAndOutQuad>): this;
    prependOnceListener(eventName: SubscribableTerms, listener: nodeEventListener<InAndOutQuad>): this;
    removeAllListeners(eventName: SubscribableTerms): this;
    removeListener(eventName: SubscribableTerms, listener: nodeEventListener<InAndOutQuad>): this;
    setMaxListeners(n: number): this;
    rawListeners(eventName: SubscribableTerms): nodeEventListener<InAndOutQuad>[];
    startTransaction(): TransactionalDataset<InAndOutQuad>;
}
